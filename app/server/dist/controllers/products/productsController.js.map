{"version":3,"sources":["../../../src/controllers/products/productsController.js"],"names":["queryAllProducts","callback","connectionDB","getDBInstance","collection","find","toArray","validId","idProduct","bd_temp","forEach","doc","push","exists","includes","createNewProduct","newData","newProduct","description","price","unitPrice","status","Boolean","insertOne","updateProduct","idToUpdate","updatedData","updateOne","_id","ObjectId","$set","returnOriginal","deleteProduct","idToDelete","deleteOne"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,gBAAgB,GAAG,MAAOC,QAAP,IAAoB;AAC3C,QAAMC,sBACHC,aADG,GAEHC,UAFG,CAEQ,OAFR,EAGHC,IAHG,CAGE,EAHF,EAIHC,OAJG,CAIKL,QAJL,CAAN;AAKD,CAND;;;;AAQA,MAAMM,OAAO,GAAG,MAAOC,SAAP,IAAqB;AACnC,QAAMC,OAAO,GAAG,EAAhB;AACE,QAAMP,sBACHC,aADG,GAEHC,UAFG,CAEQ,OAFR,EAGHC,IAHG,CAGE,EAHF,EAIHK,OAJG,CAIMC,GAAD,IAAS;AAChBF,IAAAA,OAAO,CAACG,IAAR,CAAaD,GAAG,CAACH,SAAjB;AACD,GANG,CAAN;AAQA,QAAMK,MAAM,GAAGJ,OAAO,CAACK,QAAR,CAAiBN,SAAjB,CAAf;AACA,SAAOK,MAAP;AACH,CAZD;;;;AAcA,MAAME,gBAAgB,GAAG,OAAOC,OAAP,EAAgBf,QAAhB,KAA6B;AAClD,QAAMgB,UAAU,GAAG;AACjBT,IAAAA,SAAS,EAAEQ,OAAO,CAACR,SADF;AAEjBU,IAAAA,WAAW,EAAEF,OAAO,CAACE,WAFJ;AAGjBC,IAAAA,KAAK,EAAEH,OAAO,CAACI,SAHE;AAIjBC,IAAAA,MAAM,EAAEC,OAAO,CAACN,OAAO,CAACK,MAAT;AAJE,GAAnB;AAMA,QAAMnB,sBACHC,aADG,GAEHC,UAFG,CAEQ,OAFR,EAGHmB,SAHG,CAGON,UAHP,EAGmBhB,QAHnB,CAAN;AAIH,CAXD,C,CAaA;;;;;AACA,MAAMuB,aAAa,GAAG,OAAOC,UAAP,EAAmBC,WAAnB,EAAgCzB,QAAhC,KAA6C;AACjE,QAAMC,sBACHC,aADG,GAEHC,UAFG,CAEQ,OAFR,EAGHuB,SAHG,CAIF;AAAEC,IAAAA,GAAG,EAAE,IAAIC,iBAAJ,CAAaJ,UAAb;AAAP,GAJE,EAKF;AAAEK,IAAAA,IAAI,EAAEJ;AAAR,GALE,EAMF;AAAEK,IAAAA,cAAc,EAAE;AAAlB,GANE,EAOF9B,QAPE,CAAN;AASD,CAVD;;;;AAYA,MAAM+B,aAAa,GAAG,OAAOC,UAAP,EAAmBhC,QAAnB,KAAgC;AACpD,QAAMC,sBACHC,aADG,GAEHC,UAFG,CAEQ,OAFR,EAGH8B,SAHG,CAGO;AAAEN,IAAAA,GAAG,EAAE,IAAIC,iBAAJ,CAAaI,UAAb;AAAP,GAHP,EAG0ChC,QAH1C,CAAN;AAID,CALD","sourcesContent":["import connectionDB from \"../../db/connectionDB\";\nimport { ObjectId } from \"mongodb\";\n\nconst queryAllProducts = async (callback) => {\n  await connectionDB\n    .getDBInstance()\n    .collection(\"users\")\n    .find({})\n    .toArray(callback);\n};\n\nconst validId = async (idProduct) => {\n  const bd_temp = [];\n    await connectionDB\n      .getDBInstance()\n      .collection(\"users\")\n      .find({})\n      .forEach((doc) => {\n        bd_temp.push(doc.idProduct);\n      });\n \n    const exists = bd_temp.includes(idProduct);\n    return exists;\n}\n\nconst createNewProduct = async (newData, callback) => { \n    const newProduct = {\n      idProduct: newData.idProduct,\n      description: newData.description,\n      price: newData.unitPrice,\n      status: Boolean(newData.status),\n    };\n    await connectionDB\n      .getDBInstance()\n      .collection(\"users\")\n      .insertOne(newProduct, callback);\n};\n\n//this comprobation is duty to front-end (only fields required)\nconst updateProduct = async (idToUpdate, updatedData, callback) => {\n  await connectionDB\n    .getDBInstance()\n    .collection(\"users\")\n    .updateOne(\n      { _id: new ObjectId(idToUpdate) },\n      { $set: updatedData },\n      { returnOriginal: true },\n      callback\n    );\n};\n\nconst deleteProduct = async (idToDelete, callback) => {\n  await connectionDB\n    .getDBInstance()\n    .collection(\"users\")\n    .deleteOne({ _id: new ObjectId(idToDelete) }, callback);\n};\nexport { queryAllProducts, createNewProduct, updateProduct, deleteProduct, validId };\n"],"file":"productsController.js"}