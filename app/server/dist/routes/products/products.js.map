{"version":3,"sources":["../../../src/routes/products/products.js"],"names":["router","callbackResponse","res","err","result","status","json","route","get","req","error","console","log","post","existsPromise","body","idProduct","then","isDuplicated","sendStatus","patch","params","isFound","delete","id"],"mappings":"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","sourcesContent":["import { Router } from \"express\";\nimport {\n  queryAllProducts,\n  createNewProduct,\n  updateProduct,\n  deleteProduct,\n  validId,\n} from \"../../controllers/products/productsController\";\n\nconst router = Router();\n\n//It's used for rsponse generic answers\n// res => err,result, function nesting\n//here it give the function (err, result)\nconst callbackResponse = (res) => (err, result) => {\n  if (err) throw err;\n  res.status(200).json(result);\n};\n\nrouter.route(\"/\").get((req, res) => {\n  //if there is going wrong try/catch handle it\n  try {\n    queryAllProducts(callbackResponse(res));\n  } catch (error) {\n    console.log(\"Error get request in products\", error);\n  }\n});\n\nrouter.route(\"/create-product\").post(async (req, res) => {\n  try {\n    const existsPromise = validId(req.body.idProduct);\n\n    existsPromise.then((isDuplicated) => {\n      if (!isDuplicated) {\n        createNewProduct(req.body, callbackResponse(res));\n      } else {\n        console.log(\"id duplicated\");\n        res.sendStatus(400);\n      }\n    });\n  } catch (error) {\n    console.log(\"Error post request in products\");\n    res.sendStatus(500);\n  }\n});\n\nrouter.route(\"/update-product/:idProduct\").patch((req, res) => {\n  try {\n    const existsPromise = validId(req.params.idProduct);\n\n    existsPromise.then((isFound) => {\n      if (isFound) {\n        updateProduct(req.params.idProduct, req.body, callbackResponse(res));\n      } else {\n        console.log(\"id not found patch request\");\n        res.sendStatus(400);\n      }\n    });\n  } catch (error) {\n    console.log(\"Error patch request in products\");\n  }\n});\n\nrouter.delete(\"/delete/:idProduct\", (req, res) => {\n  try {\n    const existsPromise = validId(req.params.idProduct);\n\n    existsPromise.then((isFound) => {\n      if (isFound) {\n        deleteProduct(req.params.id, callbackResponse(res));\n      } else {\n        console.log(\"id not found\");\n        res.sendStatus(400);\n      }\n    });\n  } catch (error) {\n    console.log(\"Error delete request in products\");\n    res.sendStatus(500);\n  }\n});\n\nexport default router;\n"],"file":"products.js"}